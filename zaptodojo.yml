docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw \
           --rm softwaresecurityproject/zap-stable:2.13.0 zap-baseline.py \
           -t https://prod-i4a6zqrl.lab.practical-devsecops.training \
           -d -x zap-output.xml


python3 upload-results.py --host dojo-i4a6zqrl.lab.practical-devsecops.training \
    --api_key $API_KEY --engagement_id 1 --product_id 1 \
    --lead_id 1 --environment "Production" \
    --result_file /webapp/zap-output.xml \
    --scanner "ZAP Scan"

git config --global user.email "student@pdevsecops.com"
git config --global user.name "student"
git clone git@gitlab-ce-i4a6zqrl:root/django-nv.git
curl https://gitlab.practical-devsecops.training/-/snippets/3/raw -o upload-results.py && git add upload-results.py && git commit -m "Add upload-results.py file" && git push origin main


docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw --rm softwaresecurityproject/zap-stable:2.13.0 zap-baseline.py -t https://prod-i4a6zqrl.lab.practical-devsecops.training -d -x zap-output.xml
export API_KEY=$(curl -s -XPOST -H 'content-type: application/json' https://dojo-i4a6zqrl.lab.practical-devsecops.training/api/v2/api-token-auth/ -d '{"username": "root", "password": "pdso-training"}' | jq -r '.token' )

python3 upload-results.py --host dojo-i4a6zqrl.lab.practical-devsecops.training --api_key $API_KEY --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file zap-output.xml --scanner "ZAP Scan"


dast-zap:
  stage: integration
  before_script:
    - apk add py-pip py-requests
    - docker pull softwaresecurityproject/zap-stable:2.13.0
  script:
    - docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw --rm softwaresecurityproject/zap-stable:2.13.0 zap-baseline.py -t https://prod-i4a6zqrl.lab.practical-devsecops.training -d -x zap-output.xml
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file zap-output.xml --scanner "ZAP Scan"
  artifacts:
    paths: [zap-output.xml]
    when: always
    expire_in: 1 day


cat >.github/workflows/main.yaml<<EOF
name: Django                                  # workflow name

on:
  push:
    branches:                                 # similar to "only" in GitLab
      - main

jobs:
  build:
    runs-on: ubuntu-20.04                    # similar to "image" in GitLab
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py check

    sast:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json

      - uses: actions/upload-artifact@v2
        with:
          name: Bandit
          path: bandit-output.json
        if: always()                        # what is this for?

      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: python3 upload-results.py --host ${{ secrets.DOJO_HOST }} --api_key ${{ secrets.DOJO_API_TOKEN }} --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file bandit-output.json --scanner "Bandit Scan"

  test:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - run: |
          pip3 install --upgrade virtualenv
          virtualenv env
          source env/bin/activate
          pip install -r requirements.txt
          python manage.py test taskManager

  integration:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - run: echo "This is an integration step"
      - run: exit 1
        continue-on-error: true

  prod:
    runs-on: ubuntu-20.04
    needs: integration
    steps:
      - run: echo "This is a deploy step."
EOF

https://dojo-i4a6zqrl.lab.practical-devsecops.training/api/key-v2